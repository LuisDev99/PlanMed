{"version":3,"sources":["components/AlertDialog.js","components/CircularProgress.js","graphql/queries/index.js","pages/login/login.js","components/SnackBar.js","components/SearchBar.js","components/LinearProgress.js","components/SkeletonPatientCard.js","components/PatientCard.js","components/Patient.js","pages/doctor/doctor.js","pages/hospital/hospital.js","graphql/mocks/queries_mock.js","App.js","serviceWorker.js","index.js"],"names":["DialogTitle","withStyles","theme","root","margin","padding","spacing","closeButton","position","right","top","color","palette","grey","props","children","classes","onClose","other","disableTypography","className","Typography","variant","IconButton","aria-label","onClick","DialogContent","MuiDialogContent","CustomizedDialogs","onDialogCloseEvent","dialogTitle","dialogMessage","React","useState","open","setOpen","handleClose","Dialog","aria-labelledby","id","dividers","gutterBottom","CircularIndeterminate","CircularProgress","LOGIN_QUERY","gql","GET_PATIENT_BY_ID_NUMBER","useStyles","makeStyles","loginPage","backgroundColor","width","height","paper","alignContent","display","flexDirection","alignItems","avatar","secondary","main","form","marginTop","submit","SignIn","email","setEmail","password","setPassword","loginFailed","setLoginFailure","isEmailEmpty","setIsEmailEmpty","isPasswordEmpty","setIsPasswordEmpty","isAlertDialogOpen","setIsAlertDialogOpen","useMutation","onCompleted","loginResult","login","success","userInformation","role","localStorage","setItem","JSON","stringify","window","location","loading","error","handleLogin","event","preventDefault","variables","credentials","console","log","message","networkError","name","Container","component","maxWidth","CssBaseline","onSubmit","Paper","elevation","Avatar","TextField","required","fullWidth","value","onChange","target","label","autoComplete","autoFocus","type","Button","style","variantIcon","CheckCircleIcon","warning","WarningIcon","ErrorIcon","info","InfoIcon","useStyles1","green","dark","primary","amber","icon","fontSize","iconVariant","opacity","marginRight","MySnackbarContentWrapper","Icon","SnackbarContent","clsx","aria-describedby","action","key","CustomSnackbar","duration","messageStatus","reason","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","grow","flexGrow","title","breakpoints","up","search","borderRadius","shape","fade","common","white","marginLeft","searchIcon","pointerEvents","justifyContent","inputRoot","inputInput","transition","transitions","create","logoutBtn","searchBtn","sectionDesktop","sectionMobile","SearchAppBar","onValueChange","onKeyPress","onSearchButtonClick","anchorEl","setAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMenuOpen","Boolean","isMobileMenuOpen","handleProfileMenuOpen","currentTarget","handleMobileMenuClose","handleMenuClose","menuId","renderMenu","Menu","keepMounted","transformOrigin","MenuItem","removeItem","renderMobileMenu","aria-controls","aria-haspopup","AppBar","Toolbar","noWrap","Tooltip","TransitionComponent","Zoom","arrow","InputBase","placeholder","inputMode","input","inputProps","edge","LinearProgressIndeterminate","completed","setCompleted","useEffect","timer","setInterval","oldCompleted","diff","Math","random","min","clearInterval","LinearProgress","SkeletonPatientCard","Skeleton","active","inactive","CancelIcon","card","red","media","paddingTop","expand","transform","shortest","expandOpen","Content","patientSchema","isActive","activePlan","description","PatientCard","patient","expanded","setExpanded","handleExpandClick","Card","CardHeader","subheader","htmlColor","CardContent","CardActions","disableSpacing","alignSelf","aria-expanded","Collapse","in","timeout","unmountOnExit","paragraph","Patient","data","patientInformation","getPatientByIdNumber","DoctorPage","numberId","setnumberId","isInputEmpty","setInputEmpty","useLazyQuery","response","getPatient","handleSearchPatient","HospitalPage","shouldPDF_FormAppear","setPDF_Form","Fab","Queries_Mock","request","query","result","identityNumber","routingProduction","path","exact","from","to","App","client","mocks","QueriesMock","addTypename","hostname","match","ApolloClient","uri","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.04ecf98b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = theme => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(2),\n    },\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n});\n\nconst DialogTitle = withStyles(styles)(props => {\n    const { children, classes, onClose, ...other } = props;\n    return (\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\n            <Typography variant=\"h6\">{children}</Typography>\n            {onClose ? (\n                <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\n                    <CloseIcon />\n                </IconButton>\n            ) : null}\n        </MuiDialogTitle>\n    );\n});\n\nconst DialogContent = withStyles(theme => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n}))(MuiDialogContent);\n\n\nexport default function CustomizedDialogs({ onDialogCloseEvent, dialogTitle = '', dialogMessage = '' }) {\n    const [open, setOpen] = React.useState(true);\n\n    const handleClose = () => {\n        setOpen(false);\n        onDialogCloseEvent();\n    };\n\n    return (\n        <div>\n\n            <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\n                <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\n                    {dialogTitle}\n                </DialogTitle>\n                <DialogContent dividers>\n                    <Typography gutterBottom>\n                        {dialogMessage}\n                    </Typography>\n                </DialogContent>\n            </Dialog>\n        </div>\n    );\n}\n\nCustomizedDialogs.propTypes = {\n    onDialogCloseEvent: PropTypes.func.isRequired, //Used for signaling the parent component that the dialog was close\n    dialogTitle: PropTypes.string.isRequired,\n    dialogMessage: PropTypes.string.isRequired,\n};\n\n\n","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nexport default function CircularIndeterminate() {\n\n    return (\n        <div>\n            <CircularProgress color=\"secondary\" />\n        </div>\n    );\n}","import { gql } from \"apollo-boost\";\n\n/* Centralized file where all the queries should be (by convention) in \n    order to have a single source of truth\n*/\n\n\n/* If the graphql schema of this query or any object schema related to this query changes (that is, the graphql API changes this query or affects this query), \n    add here all the files that have a dependency of this query to have a reference of what\n    needs to be change when this query gets modified \n\n    Dependencies: \n        - pages/login/login.js\n*/\nexport const LOGIN_QUERY = gql`\n    mutation login($credentials: UserCredentialInput!){\n        login(credentials: $credentials) {\n            success\n            userInformation {\n                email\n                role\n            }\n        }\n    }\n`;\n\n/* If the graphql schema of this query or any object schema related to this query changes, \n    add here all the files that have a dependency of this query to have a reference of what\n    needs to be change when this query gets modified\n\n    Dependencies: \n        - components/Patient.js\n        - components/PatientCard.js\n        - pages/doctor/doctor.js\n        - pages/hospital/hospital.js\n*/\nexport const GET_PATIENT_BY_ID_NUMBER = gql`\n    query getPatientByIdNumber($numberId: String!){\n        getPatientByIdNumber(idNumber: $numberId) {\n          success\n          patientInformation {\n            identityNumber\n            name\n            isActive\n            activePlan\n            description\n          }\n        }\n    }\n`;","import React, { useState } from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\n\nimport AlertDialog from '../../components/AlertDialog.js';\nimport CircularProgress from '../../components/CircularProgress.js';\n\nimport { useMutation } from '@apollo/react-hooks';\n\nimport { LOGIN_QUERY } from '../../graphql/queries/index.js';\n\n\nconst useStyles = makeStyles(theme => ({\n    loginPage: {\n        backgroundColor: '#982cfc',\n        width: '100vw',\n        height: '100vh',\n        padding: '50px'\n    },\n    paper: {\n        alignContent: 'center',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        backgroundColor: 'white',\n        padding: '20px',\n    },\n    avatar: {\n        margin: theme.spacing(1),\n        backgroundColor: theme.palette.secondary.main,\n    },\n    form: {\n        width: '100%', // Fix IE 11 issue.\n        marginTop: theme.spacing(1),\n    },\n    submit: {\n        margin: theme.spacing(3, 0, 2),\n    },\n}));\n\n\nexport default function SignIn() {\n    const classes = useStyles();\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [loginFailed, setLoginFailure] = useState(false);\n    const [isEmailEmpty, setIsEmailEmpty] = useState(false);\n    const [isPasswordEmpty, setIsPasswordEmpty] = useState(false);\n    const [isAlertDialogOpen, setIsAlertDialogOpen] = useState(false);\n\n    const [login, { loading, error }] = useMutation(LOGIN_QUERY, {\n        onCompleted(loginResult) {\n\n            if (loginResult && loginResult.login && loginResult.login.success) {\n\n                const userInformation = loginResult.login.userInformation;\n\n                //Old\n                /* if (userInformation.role === \"Doctor\") {\n                    localStorage.setItem('user', JSON.stringify(userInformation));\n                    window.location = \"/DoctorPage\";\n                }\n                else if (userInformation.role === \"Hospital\") {\n                    localStorage.setItem('user', JSON.stringify(userInformation));\n                    window.location = \"/HospitalPage\";\n                } */\n\n                //New ?\n                if (userInformation.role === \"Doctor\" || userInformation.role === \"Hospital\") {\n                    localStorage.setItem('user', JSON.stringify(userInformation));\n                    window.location = \"/\" + userInformation.role + \"Page\";\n                }\n\n            } else {\n                setLoginFailure(true);\n            }\n\n        }\n    });\n\n    function handleOnSubmit(event) {\n        event.preventDefault();\n\n        handleLogin();\n    }\n\n    function handleLogin(event) {\n\n        if (!email) {\n            setIsEmailEmpty(true);\n            return;\n        } else {\n            setIsEmailEmpty(false);\n        }\n\n        if (!password) {\n            setIsPasswordEmpty(true);\n            return;\n        } else {\n            setIsPasswordEmpty(false);\n        }\n\n        event.preventDefault();\n\n        const userCredential = {\n            email: email,\n            password: password\n        };\n\n        /*\n            The LOGIN_QUERY has one parameter of object type UserCredential\n            Set the parameter using the variables key\n            See the 'LOGIN_QUERY' query in the queries folder for more information\n        */\n        login({ variables: { credentials: userCredential } });\n\n    }\n\n    function handleLostPasswordClick() {\n        setIsAlertDialogOpen(true);\n    }\n\n    function handleDialogCloseEvent() {\n        setIsAlertDialogOpen(false);\n    }\n\n    if (error) {\n        console.log(error);\n\n        return (\n            <div>\n                Ocurrio un error. Asegurate de que tengas conexion a internet antes de hacer inicio de sesion. Haz contacto con Plan Med para mas ayuda si el problema aun persiste.\n            <br /> Mensaje del error: {error.message}.\n                {error.networkError && <div>Estado de la conexion {error.networkError.name}: {error.networkError.message} </div>}\n            </div>\n        );\n    }\n\n    return (\n        <div className={classes.loginPage}>\n\n            {loading && <CircularProgress />}\n\n            <Container component=\"main\" maxWidth=\"xs\">\n\n                <CssBaseline />\n\n                <form onSubmit={handleOnSubmit}>\n                    <Paper className={classes.paper} elevation={3}>\n\n                        {loginFailed && <Typography component=\"h1\" variant=\"h5\" color='error'>Usuario o Contraseña incorrecta</Typography>}\n\n                        <Avatar className={classes.avatar}>\n                            <LockOutlinedIcon />\n                        </Avatar>\n\n                        <Typography component=\"h1\" variant=\"h5\">\n                            Inicio de Sesion\n                        </Typography>\n\n                        {isEmailEmpty && <Typography color='error'>*Ingresa el correo electronico</Typography>}\n\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            value={email}\n                            onChange={(event) => { setEmail(event.target.value); }}\n                            id=\"email\"\n                            label=\"Correo Electronico\"\n                            name=\"email\"\n                            autoComplete=\"email\"\n                            autoFocus\n                        />\n\n                        {isPasswordEmpty && <Typography color='error'>*Ingresa la contraseña</Typography>}\n\n                        <TextField\n                            variant=\"outlined\"\n                            margin=\"normal\"\n                            required\n                            fullWidth\n                            value={password}\n                            onChange={(event) => { setPassword(event.target.value); }}\n                            name=\"password\"\n                            label=\"Contraseña\"\n                            type=\"password\"\n                            id=\"password\"\n                            autoComplete=\"current-password\"\n                        />\n                        <Button\n                            type=\"submit\"\n                            fullWidth\n                            variant=\"contained\"\n                            color=\"primary\"\n                            className={classes.submit}\n                            onClick={handleLogin}\n                        >\n                            Iniciar sesion\n                        </Button>\n\n                        <div style={{ margin: '20px' }} />\n\n\n                        <Button color=\"primary\" onClick={handleLostPasswordClick}>\n                            ¿Olvidaste la contraseña?\n                        </Button>\n\n                        {isAlertDialogOpen &&\n                            <AlertDialog\n                                dialogTitle=\"Ayuda\"\n                                dialogMessage=\"Asegurate que estas escribiendo bien la contraseña. Tienes que contactarte con PlanMed para reestablecer la contraseña. Este sistema no provee la funcionalidad para reestablecer tu contraseña.\"\n                                onDialogCloseEvent={handleDialogCloseEvent}\n                            />\n                        }\n\n                    </Paper>\n                </form>\n\n            </Container>\n\n        </div>\n    );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { amber, green } from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n};\n\n\nconst useStyles1 = makeStyles(theme => ({\n    success: {\n        backgroundColor: green[600],\n    },\n    error: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    info: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    warning: {\n        backgroundColor: amber[700],\n    },\n    icon: {\n        fontSize: 20,\n    },\n    iconVariant: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    message: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n}));\n\nfunction MySnackbarContentWrapper(props) {\n    const classes = useStyles1();\n    const { className, message, onClose, variant, ...other } = props;\n    const Icon = variantIcon[variant];\n\n    return (\n        <SnackbarContent\n            className={clsx(classes[variant], className)}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <span id=\"client-snackbar\" className={classes.message}>\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\n                    {message}\n                </span>\n            }\n            action={[\n                <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\n                    <CloseIcon className={classes.icon} />\n                </IconButton>,\n            ]}\n            {...other}\n        />\n    );\n}\n\n\nMySnackbarContentWrapper.propTypes = {\n    className: PropTypes.string,\n    message: PropTypes.string,\n    onClose: PropTypes.func,\n    variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired,\n};\n\n\nexport default function CustomSnackbar({ message = \"Exito!\", duration = 2000, onClose, messageStatus = 'success' }) {\n    const [open, setOpen] = React.useState(true);\n\n    const handleClose = (event, reason) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n\n        setOpen(false);\n\n        if (onClose)\n            onClose();\n\n    };\n\n    return (\n        <div>\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                open={open}\n                autoHideDuration={duration}\n                onClose={handleClose}\n            >\n                <MySnackbarContentWrapper\n                    onClose={handleClose}\n                    variant={messageStatus}\n                    message={message}\n                />\n            </Snackbar>\n        </div>\n    );\n}\n\nCustomSnackbar.propTypes = {\n    message: PropTypes.string,\n    messageStatus: PropTypes.oneOf(['error', 'info', 'success', 'warning']),\n    duration: PropTypes.number,\n    onClose: PropTypes.func\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport MoreIcon from '@material-ui/icons/MoreVert';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputBase from '@material-ui/core/InputBase';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Button from '@material-ui/core/Button';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { Zoom } from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n    grow: {\n        flexGrow: 1,\n    },\n    title: {\n        flexGrow: 2,\n        display: 'none',\n        [theme.breakpoints.up('sm')]: {\n            display: 'block',\n        },\n    },\n    search: {\n        position: 'relative',\n        borderRadius: theme.shape.borderRadius,\n        backgroundColor: fade(theme.palette.common.white, 0.15),\n        '&:hover': {\n            backgroundColor: fade(theme.palette.common.white, 0.25),\n        },\n        width: '100%',\n        [theme.breakpoints.up('sm')]: {\n            marginLeft: theme.spacing(20),\n            width: 'auto',\n        },\n    },\n    searchIcon: {\n        width: theme.spacing(5),\n        height: '100%',\n        position: 'absolute',\n        pointerEvents: 'none',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    inputRoot: {\n        color: 'inherit',\n    },\n    inputInput: {\n        padding: theme.spacing(1, 1, 1, 7),\n        transition: theme.transitions.create('width'),\n        width: '100%',\n        [theme.breakpoints.up('md')]: {\n            width: 400,\n        },\n    },\n    logoutBtn: {\n        flexGrow: 1,\n    },\n    searchBtn: {\n        flexGrow: 3\n    },\n\n    sectionDesktop: {\n        display: 'none',\n        [theme.breakpoints.up('md')]: {\n            display: 'flex',\n        },\n    },\n    sectionMobile: {\n        display: 'flex',\n        [theme.breakpoints.up('md')]: {\n            display: 'none',\n        },\n    },\n\n}));\n\nexport default function SearchAppBar({ onValueChange, onKeyPress, value, onSearchButtonClick, color }) {\n    const classes = useStyles();\n\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\n\n    const isMenuOpen = Boolean(anchorEl);\n\n    const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\n\n    const handleProfileMenuOpen = event => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleMobileMenuClose = () => {\n        setMobileMoreAnchorEl(null);\n    };\n\n    const handleMenuClose = () => {\n        setAnchorEl(null);\n        handleMobileMenuClose();\n    };\n\n    const handleMobileMenuOpen = event => {\n        setMobileMoreAnchorEl(event.currentTarget);\n    };\n\n    function handleLogout() {\n\n        /* Clear local storage */\n        localStorage.removeItem('user');\n\n        /* Go back to home (which should be the login page) */\n        window.location = \"/\";\n\n    }\n\n    const menuId = 'primary-search-account-menu';\n\n    const renderMenu = (\n        <Menu\n            anchorEl={anchorEl}\n            anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n            id={menuId}\n            keepMounted\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            open={isMenuOpen}\n            onClose={handleMenuClose}\n        >\n            <MenuItem onClick={handleMenuClose}>Mi Cuenta</MenuItem>\n            <MenuItem onClick={handleLogout}>Cerrar Sesion</MenuItem>\n        </Menu>\n    );\n\n    const mobileMenuId = 'primary-search-account-menu-mobile';\n\n    const renderMobileMenu = (\n        <Menu\n            anchorEl={mobileMoreAnchorEl}\n            anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n            id={mobileMenuId}\n            keepMounted\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            open={isMobileMenuOpen}\n            onClose={handleMobileMenuClose}\n        >\n            <MenuItem onClick={handleProfileMenuOpen}>\n                <IconButton\n                    aria-label=\"account of current user\"\n                    aria-controls=\"primary-search-account-menu\"\n                    aria-haspopup=\"true\"\n                    color=\"inherit\"\n                >\n                    <AccountCircle />\n                </IconButton>\n                <p>Perfil</p>\n            </MenuItem>\n        </Menu>\n    );\n\n    return (\n        <div className={classes.grow}>\n            <AppBar position=\"static\" color={color}>\n                <Toolbar>\n\n                    <Typography className={classes.title} variant=\"h6\" noWrap>\n                        PlanMed\n                    </Typography>\n\n                    <div className={classes.search}>\n\n                        <div className={classes.searchIcon}>\n                            <SearchIcon />\n                        </div>\n\n                        <Tooltip TransitionComponent={Zoom} title=\"Si el paciente esta suscrito a PlanMed, ingresa el # de identitdad de dicho paciente para ver su informacion\" arrow>\n                            <InputBase\n                                placeholder=\"# de identidad\"\n                                inputMode='decimal'\n                                onChange={onValueChange}\n                                onKeyPress={onKeyPress}\n                                value={value}\n                                autoFocus={true}\n                                classes={{\n                                    root: classes.inputRoot,\n                                    input: classes.inputInput,\n                                }}\n                                inputProps={{ 'aria-label': 'search' }}\n                            />\n                        </Tooltip>\n\n                    </div>\n\n                    <Button color='inherit' className={classes.searchBtn} onClick={onSearchButtonClick} >Buscar paciente</Button>\n\n                    <div className={classes.grow} />\n\n                    <div className={classes.sectionDesktop}>\n                        <IconButton\n                            edge=\"end\"\n                            aria-label=\"account of current user\"\n                            aria-controls={menuId}\n                            aria-haspopup=\"true\"\n                            onClick={handleProfileMenuOpen}\n                            color=\"inherit\"\n                        >\n                            <AccountCircle />\n                        </IconButton>\n                    </div>\n\n                    <div className={classes.sectionMobile}>\n                        <IconButton\n                            aria-label=\"show more\"\n                            aria-controls={mobileMenuId}\n                            aria-haspopup=\"true\"\n                            onClick={handleMobileMenuOpen}\n                            color=\"inherit\"\n                        >\n                            <MoreIcon />\n                        </IconButton>\n                    </div>\n\n                </Toolbar>\n            </AppBar>\n\n            {renderMobileMenu}\n            {renderMenu}\n        </div>\n    );\n}\n\nSearchAppBar.propTypes = {\n    onValueChange: PropTypes.func,\n    onKeyPress: PropTypes.func,\n    value: PropTypes.string,\n    onSearchButtonClick: PropTypes.func,\n    color: PropTypes.oneOf(['primary', 'secondary']).isRequired\n};","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n        '& > * + *': {\n            marginTop: theme.spacing(2),\n        },\n    },\n}));\n\nexport default function LinearProgressIndeterminate() {\n    const classes = useStyles();\n    const [completed, setCompleted] = React.useState(0);\n\n    React.useEffect(() => {\n        function progress() {\n            setCompleted(oldCompleted => {\n                if (oldCompleted === 100) {\n                    return 0;\n                }\n                const diff = Math.random() * 10;\n                return Math.min(oldCompleted + diff, 100);\n            });\n        }\n\n        const timer = setInterval(progress, 500);\n        return () => {\n            clearInterval(timer);\n        };\n    }, []);\n\n    return (\n        <div className={classes.root}>\n            <LinearProgress variant=\"determinate\" value={completed} />\n        </div>\n    );\n}","import React from 'react';\nimport Skeleton from '@material-ui/lab/Skeleton';\n\nfunction SkeletonPatientCard() {\n\n    return (\n        <div>\n            <Skeleton variant=\"text\" />\n            <Skeleton variant=\"text\" />\n            <Skeleton variant=\"text\" />\n            <br />\n            <br />\n            <Skeleton variant=\"text\" />\n            <Skeleton variant=\"text\" />\n            <Skeleton variant=\"rect\" width={400} height={118} />\n        </div>\n    );\n}\n\nexport default SkeletonPatientCard;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Collapse from '@material-ui/core/Collapse';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { red } from '@material-ui/core/colors';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nconst variantIcon = {\n    active: CheckCircleIcon,\n    inactive: CancelIcon\n};\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        maxWidth: 400,\n    },\n    active: {\n        backgroundColor: 'white',\n    },\n    inactive: {\n        backgroundColor: red,\n    },\n    icon: {\n        fontSize: 30,\n    },\n    iconVariant: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    media: {\n        height: 0,\n        paddingTop: '56.25%', // 16:9\n    },\n    expand: {\n        transform: 'rotate(0deg)',\n        marginLeft: 'auto',\n        transition: theme.transitions.create('transform', {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    expandOpen: {\n        transform: 'rotate(180deg)',\n    },\n    avatar: {\n        backgroundColor: red[500],\n    },\n}));\n\n\nfunction Content({ message, Icon }) {\n\n    return (\n        <div className='row-content'>\n            <Typography>\n                {message}\n            </Typography>\n\n            {Icon}\n\n            {/*Icon && <Icon color=\"secondary\" />*/}\n\n        </div>\n    )\n}\n\nconst patientSchema = {\n    name: '',\n    isActive: false,\n    activePlan: '',\n    description: '',\n};\n\nexport default function PatientCard({ patient = patientSchema }) {\n    const classes = useStyles();\n    const [expanded, setExpanded] = React.useState(false);\n    const Icon = patient.isActive ? variantIcon.active : variantIcon.inactive;\n\n    const handleExpandClick = () => {\n        setExpanded(!expanded);\n    };\n\n    return (\n        <Card className={classes.card} elevation={3}>\n            <CardHeader\n                title={patient.name}\n                subheader=\"Activo desde: September 14, 2016\"\n            />\n\n            <Content\n                Icon={<Icon htmlColor={patient.isActive ? \"green\" : \"red\"} />}\n                message={\"Estado del paciente: \" + patient.isActive ? \"Activo\" : \"Inactivo\"}\n            />\n\n            <Content\n                message={\"Plan Actual: \" + patient.activePlan}\n            />\n\n            <CardContent>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                    {patient.description}\n                </Typography>\n            </CardContent>\n\n            <CardActions disableSpacing onClick={handleExpandClick}>\n\n                <Typography color=\"textSecondary\" style={{ alignSelf: 'inherit' }}>\n                    Ver mas informacion\n                </Typography>\n\n                <IconButton\n                    className={clsx(classes.expand, {\n                        [classes.expandOpen]: expanded,\n                    })}\n                    onClick={handleExpandClick}\n                    aria-expanded={expanded}\n                    aria-label=\"show more\"\n                    title=\"Ver mas informacion\"\n                >\n                    <ExpandMoreIcon />\n                </IconButton>\n            </CardActions>\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                <CardContent>\n                    <Typography paragraph>Informacion Extra:</Typography>\n                    <Typography paragraph>\n                        Es un buen paciente! Aqui iria mas info del paciente\n                    </Typography>\n                </CardContent>\n            </Collapse>\n        </Card>\n    );\n}\n\n/* Not defining the shape of the prop 'patient' as it may change along the way */\nPatientCard.propTypes = {\n    patient: PropTypes.object.isRequired\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport SkeletonPatientCard from './SkeletonPatientCard.js';\nimport PatientCard from './PatientCard.js';\nimport CustomSnackBar from './SnackBar';\n\nimport './../utilities/styles.css';\n\n/* This object is the schema of the prop 'data' that gets passed in the Patient component \n   For more information on how this object looks like or where did it get its properties (or if some properties do not match), see the 'GET_PATIENT_BY_ID' query in the queries folder */\n\n//eslint-disable-next-line\nconst dataSchema = {\n    getPatientByIdNumber: {\n        success: false,\n        patientInformation: {\n            name: '',\n            isActive: false,\n            activePlan: '',\n            description: '',\n        }\n    }\n};\n\nfunction Patient({ loading = false, data }) {\n\n    /* \n       Patient Information object that comes from the query response data. \n       The prop 'data' gets destructure to get the 'patientInformation' object IF 'data' is not null \n       See the 'GET_PATIENT_BY_ID_NUMBER' for more information about the patientInformation's object properties\n    */\n    const { patientInformation } = data ? data.getPatientByIdNumber : {};\n\n\n    return (\n        <div className='content-body'>\n\n            {loading &&\n                <SkeletonPatientCard />\n            }\n\n            {data &&\n                (data.getPatientByIdNumber.success\n                    ?\n                    <PatientCard patient={patientInformation} />\n                    :\n                    <CustomSnackBar\n                        message=\"El paciente no fue encontrado. Verifica bien el numero de identidad y vuelve a intentarlo\"\n                        messageStatus=\"error\"\n                        duration={5000}\n                    />\n                )\n            }\n\n        </div>\n    );\n\n}\n\n/* The prop 'data' listed below follows the same structure or model (schema, term used in graphql) as define in the 'GET_PATIENT_BY_ID' query in the queries folder */\nPatient.propTypes = {\n    loading: PropTypes.bool.isRequired,\n    data: PropTypes.exact({\n        getPatientByIdNumber: PropTypes.shape({\n            success: PropTypes.bool,\n            patientInformation: PropTypes.shape({\n                identityNumber: PropTypes.string,\n                name: PropTypes.string,\n                isActive: PropTypes.bool,\n                activePlan: PropTypes.string,\n                description: PropTypes.string\n            }),\n        }),\n    }),\n\n};\n\nexport default Patient;","import React, { useState } from 'react';\nimport { useLazyQuery } from '@apollo/react-hooks';\n\nimport CustomSnackbar from '../../components/SnackBar.js';\nimport SearchBar from '../../components/SearchBar.js';\nimport LinearProgress from '../../components/LinearProgress.js';\n\nimport Patient from '../../components/Patient.js';\n\nimport './../../utilities/styles.css';\n\nimport { GET_PATIENT_BY_ID_NUMBER } from '../../graphql/queries/index.js';\n\n\nfunction DoctorPage() {\n\n    /* numberId (numero de identidad) is the string in which we will look up the patient */\n    const [numberId, setnumberId] = useState('');\n\n    /* \n       Boolean variable used when the user does not enter any text on the searchbar.\n       If true, a snackbar will appear notifying the user to enter a text before searching.\n       When the snackbar dissappears, with the help of the snackbar's onClose event, we set isInputEmpty to false again\n    */\n    const [isInputEmpty, setInputEmpty] = useState(false);\n\n    const [getPatient, { loading, data, error }] = useLazyQuery(GET_PATIENT_BY_ID_NUMBER, {\n        onCompleted: (response) => {\n            /* This function gets called when the getPatient query is successful */\n\n        }\n    });\n\n    function handleSearchValueChange(event) {\n        setnumberId(event.target.value);\n    }\n\n    function handleKeyPress(event) {\n        if (event.key === 'Enter') {\n            handleSearchPatient();\n        }\n    }\n\n    function handleSearchPatient() {\n\n        /* If text is empty, do not continue execution */\n        if (!numberId) {\n            setInputEmpty(true);\n            return;\n        }\n\n        /* Fetch the query with the getPatient function provided by the useLazyQuery hook */\n        getPatient({\n            /* This query expects a parameter. See the 'GET_PATIENT_BY_ID_NUMBER' query defined in the queries folder for more information */\n            variables: {\n                numberId: numberId\n            }\n        });\n\n    }\n\n    function handleInputEmptySnackbarClose() {\n        setInputEmpty(false);\n    }\n\n    if (error) {\n\n        console.log(error);\n\n        return (\n            <div>{error.message}\n                <div>Asegurate de que tengas conexion a internet. Intentalo mas tarde</div>\n                <div>Si este mensaje sigue apareciendo, haz contacto con PlanMed para solucionar esta falla</div>\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            {loading && <LinearProgress />}\n\n            <SearchBar\n                onValueChange={handleSearchValueChange}\n                onKeyPress={handleKeyPress}\n                value={numberId}\n                onSearchButtonClick={handleSearchPatient}\n                color='primary'\n            />\n\n            <Patient data={data} loading={loading} />\n\n            <CustomSnackbar message=\"Haz ingresado exitosamente!\" messageStatus=\"success\" />\n\n            {isInputEmpty &&\n                <CustomSnackbar\n                    message=\"Ingresa un numero de identidad antes de realizar la busqueda del paciente\"\n                    messageStatus=\"info\"\n                    duration={5000}\n                    onClose={handleInputEmptySnackbarClose}\n                />\n            }\n\n        </div>\n    );\n}\n\n\nexport default DoctorPage;\n","import React, { useState } from 'react';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport Fab from '@material-ui/core/Fab';\nimport PDFIcon from '@material-ui/icons/PictureAsPdf'\n\nimport CustomSnackbar from '../../components/SnackBar.js';\nimport SearchBar from '../../components/SearchBar.js';\nimport LinearProgress from '../../components/LinearProgress.js';\nimport Patient from '../../components/Patient.js';\nimport CustomDialog from '../../components/AlertDialog.js';\n\nimport './../../utilities/styles.css';\n\nimport { GET_PATIENT_BY_ID_NUMBER } from '../../graphql/queries/index.js';\n\n\nfunction HospitalPage() {\n\n    /* numberId (numero de identidad) is the string in which we will look up the patient */\n    const [numberId, setnumberId] = useState('');\n\n    /* Boolean variable use to display a dialog when the user clicks the floating action button\n        If true, the dialog gets displayed\n        If false, the dialog is not displayed\n     */\n    const [shouldPDF_FormAppear, setPDF_Form] = useState(false);\n\n    /* \n       Boolean variable used when the user does not enter any text on the searchbar.\n       If true, a snackbar will appear notifying the user to enter a text before searching.\n       When the snackbar dissappears, with the help of the snackbar's onClose event, we set isInputEmpty to false again\n    */\n    const [isInputEmpty, setInputEmpty] = useState(false);\n\n    /* Using Apollo's client hook that returns a function that gets used to fetch a patient */\n    const [getPatient, { loading, data, error }] = useLazyQuery(GET_PATIENT_BY_ID_NUMBER, {\n        onCompleted: (response) => {\n            /* This function gets called when the getPatient query is successful. NOT NEEDED */\n        }\n    });\n\n    function handleSearchValueChange(event) {\n        setnumberId(event.target.value);\n    }\n\n    function handleKeyPress(event) {\n        if (event.key === 'Enter') {\n            handleSearchPatient();\n        }\n    }\n\n    function handleSearchPatient() {\n\n        /* If text is empty, do not continue execution */\n        if (!numberId) {\n            setInputEmpty(true);\n            return;\n        }\n\n        /* Fetch the query with the getPatient function provided by the useLazyQuery hook */\n        getPatient({\n            /* This query expects a parameter. See the 'GET_PATIENT_BY_ID_NUMBER' query defined in the queries folder for more information */\n            variables: {\n                numberId: numberId\n            }\n        });\n\n    }\n\n    function handleInputEmptySnackbarClose() {\n        setInputEmpty(false);\n    }\n\n    function handlePDFButtonClick() {\n        setPDF_Form(true);\n    }\n\n    function handleDialogCloseEvent() {\n        setPDF_Form(false);\n    }\n\n    if (error) {\n\n        return (\n            <div>{error.message}\n                <div>Asegurate de que tengas conexion a internet. Intentalo mas tarde</div>\n                <div>Si este mensaje sigue apareciendo, haz contacto con PlanMed para solucionar esta falla</div>\n            </div>\n        );\n    }\n\n    return (\n        <div>\n            {loading && <LinearProgress />}\n\n            <SearchBar\n                onValueChange={handleSearchValueChange}\n                onKeyPress={handleKeyPress}\n                value={numberId}\n                onSearchButtonClick={handleSearchPatient}\n                color='secondary' />\n\n            <Patient data={data} loading={loading} />\n\n            <CustomSnackbar message=\"Haz ingresado exitosamente!\" messageStatus=\"success\" />\n\n            {isInputEmpty &&\n                <CustomSnackbar\n                    message=\"Ingresa un numero de identidad antes de realizar la busqueda del paciente\"\n                    messageStatus=\"info\"\n                    duration={5000}\n                    onClose={handleInputEmptySnackbarClose}\n                />\n            }\n\n            <div className=\"floating-action-btn\">\n                <Fab color='secondary' title=\"Enviar PDF\" onClick={handlePDFButtonClick}>\n                    <PDFIcon></PDFIcon>\n                </Fab>\n            </div>\n\n            {shouldPDF_FormAppear &&\n                <CustomDialog\n                    dialogTitle=\"Enviar PDF a correo electronico\"\n                    dialogMessage=\"Aqui se implementara la funcionalidad para llenar el formulario del pdf y enviarlo por correo\"\n                    onDialogCloseEvent={handleDialogCloseEvent}\n                />\n            }\n\n        </div>\n    );\n}\n\n\nexport default HospitalPage;\n","import { LOGIN_QUERY, GET_PATIENT_BY_ID_NUMBER } from './../queries/index.js';\n\n/* \n    Useful resource on how to mock the API using apollo client: \n    * https://www.apollographql.com/docs/react/api/react-testing/\n    * https://www.apollographql.com/docs/react/development-testing/testing/\n*/\n\n\n/* Mocking the mutation 'LOGIN' and returning the role of Doctor */\nconst LOGIN_Mutation_With_Doctor_As_Role_Mock = {\n    request: {\n        query: LOGIN_QUERY,\n        variables: {\n            credentials: {\n                email: \"luisgpr99\",\n                password: \"1234\",\n            },\n        },\n\n    },\n    result: {\n        data: {\n            login: {\n                success: true,\n                userInformation: {\n                    email: \"luisgpr99\",\n                    role: \"Doctor\",\n                },\n            },\n        },\n    },\n};\n\n/* Mocking the mutation 'LOGIN' and returning the role of Hospital */\nconst LOGIN_Mutation_With_Hospital_As_Role_Mock = {\n    request: {\n        query: LOGIN_QUERY,\n        variables: {\n            credentials: {\n                email: \"hospitalDelValle\",\n                password: \"1234\",\n            },\n        },\n    },\n    result: {\n        data: {\n            login: {\n                success: true,\n                userInformation: {\n                    email: \"hospitalDelValle\",\n                    role: \"Hospital\",\n                },\n            },\n        },\n    },\n};\n\n/* Mocking the 'GET_PATIENT_BY_ID_NUMBER' */\nconst GET_PATIENT_BY_ID_NUMBER_Mock = {\n    request: {\n        query: GET_PATIENT_BY_ID_NUMBER,\n        variables: {\n            numberId: \"0501\",\n        },\n    },\n    result: {\n        data: {\n            getPatientByIdNumber: {\n                success: true,\n                patientInformation: {\n                    identityNumber: \"0501\",\n                    name: \"LuiDB\",\n                    isActive: true,\n                    activePlan: \"Bronce\",\n                    description: \"Lorem ipsum Mock el es un buen paciente la verdad\"\n                },\n            },\n        },\n    },\n};\n\nconst Queries_Mock = [\n    LOGIN_Mutation_With_Doctor_As_Role_Mock,\n    LOGIN_Mutation_With_Hospital_As_Role_Mock,\n    GET_PATIENT_BY_ID_NUMBER_Mock,\n];\n\nexport default Queries_Mock;","import React from 'react';\nimport { HashRouter, Route, BrowserRouter as Router, Switch, Redirect, Link } from \"react-router-dom\";\n\nimport SignIn from './pages/login/login.js';\nimport DoctorPage from './pages/doctor/doctor.js';\nimport HospitalPage from './pages/hospital/hospital.js';\n\nimport './App.css';\n\n//import { ApolloProvider } from '@apollo/react-hooks';\n\nimport { MockedProvider } from '@apollo/react-testing';\n\nimport QueriesMock from './graphql/mocks/queries_mock.js';\n\nconst routing = (\n\n  <Router>\n    <div>\n      <Switch>\n        <Route path=\"/\" exact component={SignIn}></Route>\n        <Route path=\"/DoctorPage\" component={DoctorPage}></Route>\n        <Route path=\"/HospitalPage\" component={HospitalPage}></Route>\n        <Redirect from=\"*\" to=\"/\" />\n      </Switch>\n    </div>\n  </Router>\n\n);\n\nconst routingProduction = (\n\n  <HashRouter>\n    <div>\n      <ul>\n        <li><Link to=\"/\">Login</Link></li>\n        <li><Link to=\"/DoctorPage\">DoctorPage</Link></li>\n        <li><Link to=\"/HospitalPage\">HospitalPage</Link></li>\n      </ul>\n\n      <hr />\n\n      <Route path=\"/\" exact component={SignIn}></Route>\n      <Route path=\"/DoctorPage\" component={DoctorPage}></Route>\n      <Route path=\"/HospitalPage\" component={HospitalPage}></Route>\n      <Redirect from=\"*\" to=\"/\" />\n\n    </div>\n  </HashRouter>\n\n);\n\n/* Use this to fetch directly to the API */\n// function App({ client }) {\n//   return (\n//     <ApolloProvider client={client}>\n//       <div className=\"App\">\n//         {routing}\n//       </div>\n//     </ApolloProvider>\n//   );\n// }\n\n\n/* Use this to use the mocked data instead of fetching the API */\nfunction App({ client }) {\n  return (\n    <MockedProvider mocks={QueriesMock} addTypename={false}>\n      <div className=\"App\">\n        {routingProduction}\n      </div>\n    </MockedProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n/* Apollo Stuff */\nimport ApolloClient from 'apollo-boost';\n\n/* Configure apollo client and pass the client object to the App component */\nconst client = new ApolloClient({\n    uri: 'http://localhost:4000', //Todo: change this to the real backend url and enable CORS\n});\n\n\nReactDOM.render(<App client={client} />, document.getElementById('root'));\n\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}